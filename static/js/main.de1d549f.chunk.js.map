{"version":3,"sources":["Components/DigitButton.js","Components/OperationButton.js","App.js","reportWebVitals.js","index.js"],"names":["DigitButton","_ref","dispatch","digit","react_default","a","createElement","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","Object","objectSpread","currentOperand","includes","concat","previousOperand","evaluate","length","slice","_ref2","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","_operand$split","split","_operand$split2","slicedToArray","integer","decimal","format","App","_useReducer","useReducer","_useReducer2","_useReducer2$","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.de1d549f.chunk.js","sourcesContent":["import React from \"react\";\nimport { ACTIONS } from \"../App\";\n\nexport default function DigitButton({ dispatch, digit }) {\n  return (\n    <button\n      onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}\n    >\n      {digit}\n    </button>\n  );\n}\n","import React from \"react\";\nimport { ACTIONS } from \"../App\";\n\nexport default function OperationButton({ dispatch, operation }) {\n  return (\n    <button\n      onClick={() =>\n        dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: {operation} })\n      }\n    >\n      {operation}\n    </button>\n  );\n}\n","import React from \"react\";\nimport { useReducer } from \"react\";\nimport DigitButton from \"./Components/DigitButton\";\nimport OperationButton from \"./Components/OperationButton\";\nimport \"./styles.css\";\n\nexport const ACTIONS = {\n  ADD_DIGIT: \"add-digit\",\n  CHOOSE_OPERATION: \"choose-operation\",\n  CLEAR: \"clear\",\n  DELETE_DIGIT: \"delete-digit\",\n  EVALUATE: \"evaluate\",\n};\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    //case 1 - add digit\n    case ACTIONS.ADD_DIGIT:\n      //check for overwrite condition\n      if (state.overwrite) {\n        //set currentOperand = entered digit\n        //set overwrite to 'false'\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        };\n      }\n\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\n        return state;\n      }\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      };\n\n    //case2 - clear\n    case ACTIONS.CLEAR:\n      return {};\n\n    //case3 - choose operation\n    case ACTIONS.CHOOSE_OPERATION:\n      //if nothing is entered - begining\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n\n      //if current operand it null\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        };\n      }\n\n      //  previous operand is null\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        };\n      }\n\n      //setting the continuation of operaion 2+2+2 => 4+2\n      return {\n        ...state,\n        operation: payload.operation,\n        previousOperand: evaluate(state),\n        currentOperand: null,\n      };\n\n    //case4 - evaluate\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state;\n      }\n\n      //if we have every variables available in the state then\n      return {\n        ...state,\n        //adding a new value called overwrite for handling overwriting after evaluation\n        overwrite: true,\n\n        previousOperand: null,\n        currentOperand: evaluate(state),\n        operation: null,\n      };\n\n    //case5 - delete-digit\n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null,\n        };\n      }\n      if (state.currentOperand == null) {\n        return state;\n      }\n\n      //only one digit in current operand\n      if (state.currentOperand.length === 1) {\n        return {\n          ...state,\n          currentOperand: null,\n        };\n      }\n\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1),\n      };\n  }\n}\n\nfunction evaluate({ currentOperand, previousOperand, operation }) {\n  //convert string to numbers\n  const prev = parseFloat(previousOperand);\n  const current = parseFloat(currentOperand);\n\n  //check if any of them is NaN then return empty string\n  if (isNaN(prev) || isNaN(current)) return \"\";\n\n  //define variable for storing computation\n  let computation = \"\";\n\n  //switching through operation\n  switch (operation) {\n    case \"+\":\n      computation = prev + current;\n      break;\n    case \"-\":\n      computation = prev - current;\n      break;\n    case \"*\":\n      computation = prev * current;\n      break;\n    case \"/\":\n      computation = prev / current;\n      break;\n    default:\n  }\n  //return computation\n  return computation.toString();\n}\n\n//adding a digit formater\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0,\n});\n\n//function to format operand\nfunction formatOperand(operand){\n  //check if operand is null then do nothing\n  if (operand == null) return\n\n  //else split the integer and fraction part \n  const [integer,decimal] = operand.split(\".\");\n\n  //if decimal is null then format only the integer part\n  if (decimal == null) return INTEGER_FORMATTER.format(integer)\n\n  //default if decimal is present\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n}\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer,\n    {}\n  );\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">\n          {formatOperand(previousOperand)} {operation}\n        </div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button\n        className=\"span-two\"\n        onClick={() => {\n          dispatch({ type: ACTIONS.CLEAR });\n        }}\n      >\n        AC\n      </button>\n      <button\n        onClick={() => {\n          dispatch({ type: ACTIONS.DELETE_DIGIT });\n        }}\n      >\n        DEL\n      </button>\n      <OperationButton operation=\"/\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button\n        className=\"span-two\"\n        onClick={() => {\n          dispatch({ type: ACTIONS.EVALUATE });\n        }}\n      >\n        =\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}